@page "/transactions/edit/{Id:int}"
@using System.Security.Claims
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Edit Transaction - Wallet Manager</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            @if (isLoading)
            {
                <LoadingComponent />
            }
            else if (transaction == null)
            {
                <div class="alert alert-danger">
                    <h4 class="alert-heading">Transaction not found!</h4>
                    <p>The transaction you're trying to edit doesn't exist or you don't have access to it.</p>
                    <hr>
                    <p class="mb-0">
                        <a href="/transactions" class="btn btn-primary">Back to Transactions</a>
                    </p>
                </div>
            }
            else
            {
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h3 class="mb-0">Edit Transaction</h3>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@updateTransactionModel" OnValidSubmit="HandleUpdate">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">
                                    @errorMessage
                                </div>
                            }

                            <div class="alert alert-info">
                                <p class="mb-0">Editing transaction in wallet: <strong>@transaction.WalletName</strong></p>
                            </div>

                            <div class="mb-3">
                                <label for="type" class="form-label">Transaction Type</label>
                                <InputSelect id="type" class="form-select" @bind-Value="updateTransactionModel.Type">
                                    <option value="@TransactionType.Income">Income</option>
                                    <option value="@TransactionType.Expense">Expense</option>
                                    <option value="@TransactionType.Transfer">Transfer</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => updateTransactionModel.Type)" />
                            </div>

                            <div class="mb-3">
                                <label for="amount" class="form-label">Amount</label>
                                <InputNumber id="amount" class="form-control" @bind-Value="updateTransactionModel.Amount" />
                                <ValidationMessage For="@(() => updateTransactionModel.Amount)" />
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputText id="description" class="form-control" @bind-Value="updateTransactionModel.Description" />
                                <ValidationMessage For="@(() => updateTransactionModel.Description)" />
                            </div>

                            <div class="mb-3">
                                <label for="category" class="form-label">Category (Optional)</label>
                                <InputText id="category" class="form-control" @bind-Value="updateTransactionModel.Category" />
                                <ValidationMessage For="@(() => updateTransactionModel.Category)" />
                            </div>

                            <div class="mb-3">
                                <label for="reference" class="form-label">Reference (Optional)</label>
                                <InputText id="reference" class="form-control" @bind-Value="updateTransactionModel.Reference" />
                                <ValidationMessage For="@(() => updateTransactionModel.Reference)" />
                            </div>

                            <div class="mb-3">
                                <label for="transactionDate" class="form-label">Transaction Date</label>
                                <InputDate id="transactionDate" class="form-control" @bind-Value="updateTransactionModel.TransactionDate" />
                                <ValidationMessage For="@(() => updateTransactionModel.TransactionDate)" />
                            </div>

                            <div class="d-flex justify-content-between">
                                <a href="/wallets/@transaction.WalletId" class="btn btn-outline-secondary">Cancel</a>
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-1">Saving...</span>
                                    }
                                    else
                                    {
                                        <span>Save Changes</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private TransactionDto? transaction;
    private UpdateTransactionDto updateTransactionModel = new UpdateTransactionDto();
    private string? errorMessage;
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        // Check user role
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var role = authState.User.FindFirst("role")?.Value;

        if (role != "Admin")
        {
            NavigationManager.NavigateTo("/access-denied"); // Redirect non-admins
            return;
        }

        await LoadTransaction(); // Proceed only for Admins
    }

    private async Task LoadTransaction()
    {
        isLoading = true;
        try
        {
            transaction = await TransactionService.GetTransactionByIdAsync(Id);
            if (transaction != null)
            {
                updateTransactionModel.Amount = transaction.Amount;
                updateTransactionModel.Description = transaction.Description;
                updateTransactionModel.Type = transaction.Type;
                updateTransactionModel.TransactionDate = transaction.TransactionDate;
                updateTransactionModel.Category = transaction.Category;
                updateTransactionModel.Reference = transaction.Reference;
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleUpdate()
    {
        errorMessage = null;
        isSaving = true;

        try
        {
            var updatedTransaction = await TransactionService.UpdateTransactionAsync(Id, updateTransactionModel);
            if (updatedTransaction != null)
            {
                NavigationManager.NavigateTo($"/wallets/{updatedTransaction.WalletId}");
            }
            else
            {
                errorMessage = "Failed to update transaction. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }
}
