@page "/wallets/edit/{Id:int}"
@inject IWalletService WalletService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Edit Wallet - Wallet Manager</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            @if (isLoading)
            {
                <LoadingComponent />
            }
            else if (wallet == null)
            {
                <div class="alert alert-danger">
                    <h4 class="alert-heading">Wallet not found!</h4>
                    <p>The wallet you're trying to edit doesn't exist or you don't have access to it.</p>
                    <hr>
                    <p class="mb-0">
                        <a href="/wallets" class="btn btn-primary">Back to Wallets</a>
                    </p>
                </div>
            }
            else
            {
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h3 class="mb-0">Edit Wallet: @wallet.Name</h3>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@updateWalletModel" OnValidSubmit="HandleUpdate">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">
                                    @errorMessage
                                </div>
                            }

                            <div class="mb-3">
                                <label for="name" class="form-label">Wallet Name</label>
                                <InputText id="name" class="form-control" @bind-Value="updateWalletModel.Name" />
                                <ValidationMessage For="@(() => updateWalletModel.Name)" />
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" class="form-control" @bind-Value="updateWalletModel.Description" rows="3" />
                                <ValidationMessage For="@(() => updateWalletModel.Description)" />
                            </div>

                            <div class="mb-3">
                                <label for="currency" class="form-label">Currency</label>
                                <InputSelect id="currency" class="form-select" @bind-Value="updateWalletModel.Currency">
                                    <option value="USD">USD - US Dollar</option>
                                    <option value="EUR">EUR - Euro</option>
                                    <option value="GBP">GBP - British Pound</option>
                                    <option value="JPY">JPY - Japanese Yen</option>
                                    <option value="CAD">CAD - Canadian Dollar</option>
                                    <option value="AUD">AUD - Australian Dollar</option>
                                    <option value="CHF">CHF - Swiss Franc</option>
                                    <option value="CNY">CNY - Chinese Yuan</option>
                                    <option value="INR">INR - Indian Rupee</option>
                                    <option value="BRL">BRL - Brazilian Real</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => updateWalletModel.Currency)" />
                            </div>

                            <div class="alert alert-info">
                                <i class="bi bi-info-circle"></i> Note: Current balance is @wallet.Balance.ToString("N2") @wallet.Currency. To adjust balance, please add a transaction.
                            </div>

                            <div class="d-flex justify-content-between">
                                <a href="/wallets/@Id" class="btn btn-outline-secondary">Cancel</a>
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-1">Saving...</span>
                                    }
                                    else
                                    {
                                        <span>Save Changes</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private WalletDto? wallet;
    private UpdateWalletDto updateWalletModel = new UpdateWalletDto();
    private string? errorMessage;
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadWallet();
    }

    private async Task LoadWallet()
    {
        isLoading = true;
        try
        {
            wallet = await WalletService.GetWalletByIdAsync(Id);
            if (wallet != null)
            {
                updateWalletModel.Name = wallet.Name;
                updateWalletModel.Description = wallet.Description;
                updateWalletModel.Currency = wallet.Currency;
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleUpdate()
    {
        errorMessage = null;
        isSaving = true;

        try
        {
            var updatedWallet = await WalletService.UpdateWalletAsync(Id, updateWalletModel);
            if (updatedWallet != null)
            {
                NavigationManager.NavigateTo($"/wallets/{updatedWallet.Id}");
            }
            else
            {
                errorMessage = "Failed to update wallet. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }
}
